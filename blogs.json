{"status":"ok","feed":{"url":"https://medium.com/feed/@guerraj_","title":"Stories by Guerraj on Medium","link":"https://medium.com/@guerraj_?source=rss-c8cd8f3f5deb------2","author":"","description":"Stories by Guerraj on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*VzgoEJVTJV4qupBtYThTVw.jpeg"},"items":[{"title":"LSTM to predict stock market prices","pubDate":"2022-09-15 05:10:38","link":"https://medium.com/@guerraj_/lstm-to-predict-stock-market-prices-241897affadf?source=rss-c8cd8f3f5deb------2","guid":"https://medium.com/p/241897affadf","author":"Guerraj","thumbnail":"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=241897affadf","description":"\n<p>Investing in the stock market turned out to be something interesting. This is probably due to how easy it can be to earn money. However, this comes with a risk. In order to enter this world, a solid strategy is required that helps to foresee the gains, but also to mitigate the\u00a0losses.</p>\n<p>This is why, after a lot of investigation, I propose a LSTM model that will help to predict the next day close price for some ticker. On this case, I use the Apple Ticker (AAPL) for the first proves, but you can try other tickers and share your results. This is the first version of this model, so feel free to explore it, and improve it if necessary.</p>\n<p>After this little introduction, let\u2019s talk about the\u00a0model.</p>\n<h4>LSTM: Long Short-Term Memory</h4>\n<p>LSTM is a type of Neural Network (a modified version) and his first objetive is to _remember_ data, that\u2019s why is called Long Short-Term memory. The idea is that LSTMs are explicitly designed to avoid the long-term dependency problem. This implementation is very usefull when we are trying to solve some time dependency problems. (If you want more information, you can click here- <a href=\"http://colah.github.io/posts/2015-08-Understanding-LSTMs/\">http://colah.github.io/posts/2015-08-Understanding-LSTMs/</a>)</p>\n<h4>Applying LSTM to stock\u00a0markets.</h4>\n<p>Now, I want to explain you how to build and LSTM and how this will <strong><em>predict</em></strong> stock\u00a0prices.</p>\n<p>First, import some libraries:</p>\n<p>Pandas is for read and obtain the stock market information. The sklearn libreries contains all refers to the LSTM model and preprocessing functions.</p>\n<pre>import pandas as pd<br>import datetime<br>import pandas_datareader.data as web<br>from pandas import Series, DataFrame<br>import math<br>import numpy as np<br>from sklearn.preprocessing import RobustScaler, MinMaxScaler<br>import matplotlib.pyplot as plt</pre>\n<pre># Neural Network library<br>from keras.models import Sequential<br>from keras.layers import LSTM, Dense, Dropout<br>from keras.optimizers import RMSprop<br>import math<br>import tensorflow as tf<br>from tensorflow.python.framework import ops</pre>\n<p>After importing the necessary libraries, is time to read the informations for the ticker. I used DataReader, but there is a library from Yahoo Finance that give the same information.</p>\n<pre>start = datetime.datetime(2012, 1, 1)<br>end = datetime.datetime(2021, 1, 5)</pre>\n<pre>df = web.DataReader(\u201cAAPL\u201d, \u2018yahoo\u2019, start, end)<br>df.tail()<br>#creating dataframe<br>data = df.sort_index(ascending=True, axis=0)<br>new_data = pd.DataFrame(index=range(0,len(df)),columns=[\u2018Date\u2019, \u2018Close\u2019])</pre>\n<p>I dropped the irrelevant information and used only the Close\u00a0price</p>\n<pre>new_data = df.drop([\u2018High\u2019,\u2019Low\u2019,\u2019Open\u2019,\u2019Volume\u2019,\u2019Adj Close\u2019],axis=1)</pre>\n<p>The most important steps are <strong><em>how to create the train and test dataset and create the model</em></strong>. For the first step I use this functions:</p>\n<pre>def create_dataset(new_data):<br> #creating train and test sets<br> dataset = new_data.values</pre>\n<pre>train = dataset[0:987,:]<br> valid = dataset[987:,:]</pre>\n<pre>#converting dataset into x_train and y_train<br> scaler = MinMaxScaler(feature_range=(0, 1))<br> scaled_data = scaler.fit_transform(dataset)</pre>\n<pre>x_train, y_train = [], []<br> for i in range(60,len(train)):<br> x_train.append(scaled_data[i-60:i,0])<br> y_train.append(scaled_data[i,0])<br> x_train, y_train = np.array(x_train), np.array(y_train)</pre>\n<pre>x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))<br> return x_train,y_train,valid,scaler</pre>\n<pre>def create_predict_data(new_data):<br> #predicting 246 values, using past 60 from the train data<br> inputs = new_data[len(new_data) \u2014 len(valid) \u2014 60:].values<br> inputs = inputs.reshape(-1,1)<br> inputs = scaler.transform(inputs)</pre>\n<pre>X_test = []<br> for i in range(60,inputs.shape[0]):<br> X_test.append(inputs[i-60:i,0])<br> X_test = np.array(X_test)</pre>\n<pre>X_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))<br> return X_test</pre>\n<p>The general idea of this two functions is to separate the input data into train and test. I created 3 datasets: X_train, Y_train and the valid_dataset. This is going to be the information to feed the model. Now, is important to scale the data. Most of the AI models works better when data is between 0 and 1. Here I used the <strong><em>MinMaxScaler</em></strong> to scale data in between this\u00a0numbers.</p>\n<p>The prediction data (or X_test) was created on the same way by cutting the main dataset into a smaller piece to obtain my information.</p>\n<p>Now, another important step: Creating the\u00a0model.</p>\n<p>First, I created a Sequential object to add the different model features. I created a LSTM model with 70 units, and another with 50 units. Then I added a Dense layer. This combination is the one that had best performance, but you can try to change this and share your\u00a0results.</p>\n<pre># create and fit the LSTM network<br>model = Sequential()<br>model.add(LSTM(units=70, return_sequences=True, input_shape=(x_train.shape[1],1)))<br>model.add(LSTM(units=50))<br>model.add(Dense(1))</pre>\n<pre>model.compile(loss=\u2019mean_squared_error\u2019, optimizer=\u2019adam\u2019,metrics=[\u2018accuracy\u2019])<br>model.fit(x_train, y_train, epochs=2, batch_size=1, verbose=1)</pre>\n<p>And here are some of the results. The RMS was near 1 so this is a good model, and the graph shows how accurates is the model.<br>{% include figure image_path=\u201d/images/Grafico_ejemplo.png\u201d alt=\u201dGrafica.\u201d caption=\u201dGraph Comparition between data and model.\u201d\u00a0%}</p>\n<p>{% include figure image_path=\u201d/images/rms.png\u201d alt=\u201dRMS\u201d caption=\u201dRMS for LSTM model.\u201d%}</p>\n<h4>Conclusion</h4>\n<p>As you may see, this model is accurate obtaining results and predicting the close price for the APPL stock. This is just an example of how LSTM can be apply to predict values. [You can find the code on my repository](<a href=\"https://github.com/guerraj97/Trading-prediction-model\">https://github.com/guerraj97/Trading-prediction-model</a>) and do any changes to improve this model or try it and share if the results are consistent with\u00a0mines.</p>\n<p>This is my first post but I have more projects to share and hope to improve in the next articles.</p>\n<p>This is just for educational propose, is not and trustworthy method for investment.</p>\n<p>The first version of this article was published on February 8,\u00a02021.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=241897affadf\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Investing in the stock market turned out to be something interesting. This is probably due to how easy it can be to earn money. However, this comes with a risk. In order to enter this world, a solid strategy is required that helps to foresee the gains, but also to mitigate the\u00a0losses.</p>\n<p>This is why, after a lot of investigation, I propose a LSTM model that will help to predict the next day close price for some ticker. On this case, I use the Apple Ticker (AAPL) for the first proves, but you can try other tickers and share your results. This is the first version of this model, so feel free to explore it, and improve it if necessary.</p>\n<p>After this little introduction, let\u2019s talk about the\u00a0model.</p>\n<h4>LSTM: Long Short-Term Memory</h4>\n<p>LSTM is a type of Neural Network (a modified version) and his first objetive is to _remember_ data, that\u2019s why is called Long Short-Term memory. The idea is that LSTMs are explicitly designed to avoid the long-term dependency problem. This implementation is very usefull when we are trying to solve some time dependency problems. (If you want more information, you can click here- <a href=\"http://colah.github.io/posts/2015-08-Understanding-LSTMs/\">http://colah.github.io/posts/2015-08-Understanding-LSTMs/</a>)</p>\n<h4>Applying LSTM to stock\u00a0markets.</h4>\n<p>Now, I want to explain you how to build and LSTM and how this will <strong><em>predict</em></strong> stock\u00a0prices.</p>\n<p>First, import some libraries:</p>\n<p>Pandas is for read and obtain the stock market information. The sklearn libreries contains all refers to the LSTM model and preprocessing functions.</p>\n<pre>import pandas as pd<br>import datetime<br>import pandas_datareader.data as web<br>from pandas import Series, DataFrame<br>import math<br>import numpy as np<br>from sklearn.preprocessing import RobustScaler, MinMaxScaler<br>import matplotlib.pyplot as plt</pre>\n<pre># Neural Network library<br>from keras.models import Sequential<br>from keras.layers import LSTM, Dense, Dropout<br>from keras.optimizers import RMSprop<br>import math<br>import tensorflow as tf<br>from tensorflow.python.framework import ops</pre>\n<p>After importing the necessary libraries, is time to read the informations for the ticker. I used DataReader, but there is a library from Yahoo Finance that give the same information.</p>\n<pre>start = datetime.datetime(2012, 1, 1)<br>end = datetime.datetime(2021, 1, 5)</pre>\n<pre>df = web.DataReader(\u201cAAPL\u201d, \u2018yahoo\u2019, start, end)<br>df.tail()<br>#creating dataframe<br>data = df.sort_index(ascending=True, axis=0)<br>new_data = pd.DataFrame(index=range(0,len(df)),columns=[\u2018Date\u2019, \u2018Close\u2019])</pre>\n<p>I dropped the irrelevant information and used only the Close\u00a0price</p>\n<pre>new_data = df.drop([\u2018High\u2019,\u2019Low\u2019,\u2019Open\u2019,\u2019Volume\u2019,\u2019Adj Close\u2019],axis=1)</pre>\n<p>The most important steps are <strong><em>how to create the train and test dataset and create the model</em></strong>. For the first step I use this functions:</p>\n<pre>def create_dataset(new_data):<br> #creating train and test sets<br> dataset = new_data.values</pre>\n<pre>train = dataset[0:987,:]<br> valid = dataset[987:,:]</pre>\n<pre>#converting dataset into x_train and y_train<br> scaler = MinMaxScaler(feature_range=(0, 1))<br> scaled_data = scaler.fit_transform(dataset)</pre>\n<pre>x_train, y_train = [], []<br> for i in range(60,len(train)):<br> x_train.append(scaled_data[i-60:i,0])<br> y_train.append(scaled_data[i,0])<br> x_train, y_train = np.array(x_train), np.array(y_train)</pre>\n<pre>x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))<br> return x_train,y_train,valid,scaler</pre>\n<pre>def create_predict_data(new_data):<br> #predicting 246 values, using past 60 from the train data<br> inputs = new_data[len(new_data) \u2014 len(valid) \u2014 60:].values<br> inputs = inputs.reshape(-1,1)<br> inputs = scaler.transform(inputs)</pre>\n<pre>X_test = []<br> for i in range(60,inputs.shape[0]):<br> X_test.append(inputs[i-60:i,0])<br> X_test = np.array(X_test)</pre>\n<pre>X_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))<br> return X_test</pre>\n<p>The general idea of this two functions is to separate the input data into train and test. I created 3 datasets: X_train, Y_train and the valid_dataset. This is going to be the information to feed the model. Now, is important to scale the data. Most of the AI models works better when data is between 0 and 1. Here I used the <strong><em>MinMaxScaler</em></strong> to scale data in between this\u00a0numbers.</p>\n<p>The prediction data (or X_test) was created on the same way by cutting the main dataset into a smaller piece to obtain my information.</p>\n<p>Now, another important step: Creating the\u00a0model.</p>\n<p>First, I created a Sequential object to add the different model features. I created a LSTM model with 70 units, and another with 50 units. Then I added a Dense layer. This combination is the one that had best performance, but you can try to change this and share your\u00a0results.</p>\n<pre># create and fit the LSTM network<br>model = Sequential()<br>model.add(LSTM(units=70, return_sequences=True, input_shape=(x_train.shape[1],1)))<br>model.add(LSTM(units=50))<br>model.add(Dense(1))</pre>\n<pre>model.compile(loss=\u2019mean_squared_error\u2019, optimizer=\u2019adam\u2019,metrics=[\u2018accuracy\u2019])<br>model.fit(x_train, y_train, epochs=2, batch_size=1, verbose=1)</pre>\n<p>And here are some of the results. The RMS was near 1 so this is a good model, and the graph shows how accurates is the model.<br>{% include figure image_path=\u201d/images/Grafico_ejemplo.png\u201d alt=\u201dGrafica.\u201d caption=\u201dGraph Comparition between data and model.\u201d\u00a0%}</p>\n<p>{% include figure image_path=\u201d/images/rms.png\u201d alt=\u201dRMS\u201d caption=\u201dRMS for LSTM model.\u201d%}</p>\n<h4>Conclusion</h4>\n<p>As you may see, this model is accurate obtaining results and predicting the close price for the APPL stock. This is just an example of how LSTM can be apply to predict values. [You can find the code on my repository](<a href=\"https://github.com/guerraj97/Trading-prediction-model\">https://github.com/guerraj97/Trading-prediction-model</a>) and do any changes to improve this model or try it and share if the results are consistent with\u00a0mines.</p>\n<p>This is my first post but I have more projects to share and hope to improve in the next articles.</p>\n<p>This is just for educational propose, is not and trustworthy method for investment.</p>\n<p>The first version of this article was published on February 8,\u00a02021.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=241897affadf\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["investment","programming","machine-learning"]}]}